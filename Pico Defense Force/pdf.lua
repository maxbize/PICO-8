-- pico defense force
-- by @maxbize

--------------------
-- Global State
--------------------
local objects = {}
local player = nil
local projectile_m = nil

--------------------
-- Built-in Methods
--------------------
function _init()
  -- Use blue as alpha
  palt(0, false)
  palt(1, true)

  srand(0) -- debugging. cost random seed

  -- Init singletons
  create_projectile_manager()
  spawn_player()

  for i = 1, 100 do
    --spawn_ant(28*32 + rnd(120), 28*32 + rnd(120))
  end

end

function _update60()
  for obj in all(objects) do
    obj.update(obj)
  end
end

function _draw()
  cls(1)

  draw_map()

  for obj in all(objects) do
    obj.draw(obj)
  end

  camera_x = peek2(0x5f28)
  camera_y = peek2(0x5f2a)
  rectfill(camera_x, camera_y, camera_x + 53, camera_y + 6, 7, true)
  print('cpu:'..(stat(1) < 0.1 and '0' or '')..flr(stat(1) * 100), camera_x + 1, camera_y + 1, 0)
  print('mem:'..(stat(0) / 2048 * 100 < 10 and '0' or '')..flr(stat(0) / 2048 * 100), camera_x + 28, camera_y + 1, 0)
end


--------------------
-- Utility Methods
--------------------

-- rotate a sprite
-- col 15 is transparent
-- sx,sy - sprite sheet coords
-- x,y - screen coords
-- a - angle
-- w - width in tiles
function rspr(sx,sy,x,y,a,w)
    local ca,sa=cos(a),sin(a)
    local srcx,srcy
    local ddx0,ddy0=ca,sa
    local mask=shl(0xfff8,(w-1))
    w*=4
    ca*=w-0.5
    sa*=w-0.5
    local dx0,dy0=sa-ca+w,-ca-sa+w
    w=2*w-1
    for ix=0,w do
        srcx,srcy=dx0,dy0
        for iy=0,w do
            if band(bor(srcx,srcy),mask)==0 then
                local c=sget(sx+srcx,sy+srcy)
    -- set transparent color here
                if (c~=15) pset(x+ix,y+iy,c)
            end
            srcx-=ddy0
            srcy+=ddx0
        end
        dx0+=ddx0
        dy0+=ddy0
    end
end

-- todo: E should be 0, S should be 90, etc...
-- todo: optimize tokens
function draw_rotated_anim(x, y, angle, start_frame, frame)
  frame += start_frame

  if     angle < 0.0625 or angle >= 0.9375 then spr(frame + 32, x, y, 1, 1, true , false) -- E
  elseif angle < 0.1875                    then spr(frame + 16, x, y, 1, 1, true , true ) -- SE
  elseif angle < 0.3125                    then spr(frame     , x, y, 1, 1, false, true ) -- S
  elseif angle < 0.4375                    then spr(frame + 16, x, y, 1, 1, false, true ) -- SW
  elseif angle < 0.5625                    then spr(frame + 32, x, y, 1, 1, false, false) -- W
  elseif angle < 0.6875                    then spr(frame + 16, x, y, 1, 1, false, false) -- NW
  elseif angle < 0.8125                    then spr(frame     , x, y, 1, 1, false, false) -- N
  else                                          spr(frame + 16, x, y, 1, 1, true , false) -- NE
  end
end

function rand(l, r)
  if r == nil then
    r = l
    l = 0
  end

  return rnd(r-l) - (r-l)/2
end

function angle_vector(theta, magnitude)
  return magnitude * cos(theta),
         magnitude * sin(theta)
end

--------------------
-- World Map
--------------------
-- TODO: Compression. Can save 50% using binary string (https://www.lexaloffle.com/bbs/?tid=38692). Maybe more with LZ compression
local map_data
local flag_data = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000808000008000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

function draw_map()

  -- Perf notes:
  -- 24% CPU for full-screen map
  --  0% cost for drawing off-screen pixels!!
  --  0% cost for drawing sprite 0 in map
  -- 26% CPU for 256 spr calls
  --map(0, 0, 0, 0, 16, 16)


  -- Find the map index of the top-left map segment
  local top_left = flr(player.x / 32) + 64 * flr(player.y / 32)

  -- Draw all map segments surrounding the player
  for x = -2, 2 do
    for y = -2, 2 do
      local data_index = top_left + x + 64 * y
      local map_tile = tonum("0x" .. sub(map_data, data_index * 2 + 1, data_index * 2 + 2))
      local flags = tonum("0x" .. sub(flag_data, data_index, data_index + 1))
      map_tile -= 1 -- Tiled uses index 0 for "empty" but we use it as tile 0

      if flags == 0 then
        map(map_tile % 32 * 4, flr(map_tile / 32) * 4, data_index % 64 * 32, flr(data_index / 64) * 32, 4, 4)
      elseif flags & 0x2 > 0 then
        error("Diagonal flip not supported -- too expensive!")

        -- +34% CPU to support rotation via tline...
        -- 90 degree rotation
--      local draw_x = data_index % 64 * 32
--      local draw_y = flr(data_index / 64) * 32
--      local map_x = map_tile % 32 * 4
--      local map_y = flr(map_tile / 32) * 4
--      for i = 0, 31 do
--        tline(draw_x + i, draw_y, draw_x + i, draw_y + 32, map_x, map_y + i / 8)
--      end
      else
        -- +13% CPU to support flipping via mget / spr if every tile is flipped on screen
        local h_flip = flags & 0x8 > 0
        local v_flip = flags & 0x4 > 0
        local draw_x = data_index % 64 * 32 + (h_flip and 24 or 0)
        local draw_y = flr(data_index / 64) * 32 + (v_flip and 24 or 0)
        local map_x = map_tile % 32 * 4
        local map_y = flr(map_tile / 32) * 4
        for i = 0, 3 do
          for j = 0, 3 do
            local s = mget(map_x + i, map_y + j)
            if s > 0 then
              spr(s, draw_x + i * 8 * (h_flip and -1 or 1), draw_y + j * 8 * (v_flip and -1 or 1), 1, 1, h_flip, v_flip)
            end
          end
        end
      end
    end
  end


end

--------------------
-- Weapons
--------------------
-- TODO: add more weapons :)
local weapon_data = {
  -- static config
  name = "af14",
  type = "aSSAULT rIFLE",
  capacity = 120,
  reload_frames = 90,
  damage = 10,
  fire_rate = 5, -- Frames per bullet. Fractional not yet supported
  projectile_lifetime = 30,
  projectile_color = 10,
  projectile_speed = 2,
  projectile_speed_random = 0.2,
  projectile_spread = 0.05,
  projectiles_per_fire = 1,

  -- runtime data
  ammo = 120,
  reload_frames_remaining = 0,
  fire_frames_remaining = 0
}

--------------------
-- Player class
--------------------
function spawn_player()
  player = {
    update = _player_update,
    draw = _player_draw,
    x = 30 * 32,
    y = 30 * 32,
    angle = 0,
    speed = 0.5,
    frame = 0,
    weapon = weapon_data
  }
  add(objects, player)
end

function _player_update(self)

  -- movement
  local move_x = 0
  local move_y = 0

  if btn(0) then
    move_x -= self.speed
  end
  if btn(1) then
    move_x += self.speed
  end
  if btn(2) then
    move_y -= self.speed
  end
  if btn(3) then
    move_y += self.speed
  end

  -- don't let the player speed walk diagonally. todo: remove???
  if move_x ~= 0 and move_y ~= 0 then
    move_x *= 0.707
    move_y *= 0.707
  end

  -- translation
  self.x += move_x
  self.y += move_y

  -- rotation
  if not btn(5) and (move_x ~= 0 or move_y ~= 0) then
    self.angle = atan2(move_x, move_y)
  end

  -- weapons
  self.weapon.reload_frames_remaining -= 1
  if self.weapon.reload_frames_remaining == 0 then
    self.weapon.ammo = self.weapon.capacity
  end
  self.weapon.fire_frames_remaining -= 1
  if btn(5) and self.weapon.ammo > 0 and self.weapon.fire_frames_remaining <= 0 then
    for i = 1, self.weapon.projectiles_per_fire do
      local vx, vy = angle_vector(self.angle + rand(-self.weapon.projectile_spread, self.weapon.projectile_spread), self.weapon.projectile_speed + rand(-self.weapon.projectile_speed_random, self.weapon.projectile_speed_random))
      add_projectile(self.x+4, self.y+4, vx, vy, self.weapon.projectile_lifetime, self.weapon.projectile_color)
      self.weapon.fire_frames_remaining = self.weapon.fire_rate
      self.weapon.ammo -= 1
      if self.weapon.ammo == 0 then
        self.weapon.reload_frames_remaining = self.weapon.reload_frames
      end
    end
  end

  -- camera locked to player
  camera(self.x - 64, self.y - 64)
end

function _player_draw(self)
  draw_rotated_anim(self.x, self.y, self.angle, 4, self.frame)
end

--------------------
-- Ant class
--------------------
function spawn_ant(x, y)
  local ant = {
    update = _ant_update,
    draw = _ant_draw,
    x = x,
    y = y,
    angle = 0,           -- animation angle (0-1)
    i = rnd(4),          -- animation timer
    frame = flr(rnd(4)), -- animation frame
  }
  add(objects, ant)
end

function _ant_update(self)

  -- advance animation state
  self.i += 1
  if self.i > 3 then
    self.i = 0
    self.frame = (self.frame + 1) % 4
  end

  -- face player
  self.angle = atan2(player.x - self.x, player.y - self.y)

  -- collision registration
  register_ant(self)
end

function _ant_draw(self)
  draw_rotated_anim(self.x, self.y, self.angle, 0, self.frame)
  --rspr(self.frame * 8, 0, self.x, self.y, 0.125, 1) 
end

--------------------
-- Projectile Manager
--------------------
function create_projectile_manager()
  projectile_m = {
    update = _projectile_manager_update,
    draw = _projectile_manager_draw,
    max_projectiles = 250,
    projectiles = {},
    index = 1, -- insertion index
    partitions = {}, -- shootable objects of the world indexed by 8x8 chunked positions
  }
  add(objects, projectile_m)

  for i = 1, projectile_m.max_projectiles do
    projectile_m.projectiles[i] = {
      x = 0,
      y = 0,
      vx = 0,
      vy = 0,
      frames = 0,
      color = 0
    }
  end
end

function add_projectile(x, y, vx, vy, frames, color)
  projectile_m.index += 1
  if (projectile_m.index > projectile_m.max_projectiles) then
    projectile_m.index = 1
  end

  local p = projectile_m.projectiles[projectile_m.index]

  p.x = x
  p.y = y
  p.vx = vx
  p.vy = vy
  p.frames = frames
  p.color = color
end

-- TODO: We can save 1-3% CPU per 100 ants by inlining this (tested on single insertion)
-- Note: With a 4096x4096 playable world, the min chunk size is 16x16 or we'll overflow the int.
--         We could do 8x8 if we use the fractional bits. e.g. index 1.00, 1.25, 1.5, 1.75 would be the four quadrants of index 1
function register_ant(ant)
  -- Single insertion at center (fast)
--  local index = flr((ant.x + 3) / 16) + flr(ant.y + 3) * 16
--
--  if projectile_m.partitions[index] == nil then
--    projectile_m.partitions[index] = {}
--  end
--  add(projectile_m.partitions[index], ant)

  -- Four corner insertion (accurate but +13% CPU at 100 ants vs single insert)
  for i = 0, 1 do
    for j = 0, 1 do
      local index = flr((ant.x + i*7) / 16) + flr(ant.y + j*7) * 16
    
      if projectile_m.partitions[index] == nil then
        projectile_m.partitions[index] = {}
      end

      local parts = projectile_m.partitions[index]
      if parts[#parts] ~= ant then
        add(parts, ant)
      end

    end
  end
end

function _projectile_manager_update(self)
  for p in all(self.projectiles) do
    if (p.frames > 0) then
      -- update projectiles
      p.x += p.vx
      p.y += p.vy
      p.frames -= 1

      -- check collisions
      local index = flr(p.x / 16) + flr(p.y) * 16
      for ant in all(self.partitions[index]) do
        -- todo: is there a faster way to check a pixel overlapping a box???
        if p.x >= ant.x and p.x < ant.x + 8 and p.y >= ant.y and p.y < ant.y + 8 then
          p.frames = 0
          del(objects, ant)
          break
        end
      end
    end
  end

  -- clear partitions
  self.partitions = {}
end

function _projectile_manager_draw(self)
  for p in all(self.projectiles) do
    if (p.frames > 0) then
      pset(p.x, p.y, p.color)
    end
  end
end

